<?php

// QuickTicket 3.0 build:20160703

// class sAppMem
// class cVIP

/**
 * sAppMem provides sse and specific shared-memory control
 * Broadcasting sse info, or clearing shared-memory are trigered by several class-methods
 * sAppMem::Control() For some class-methods, performs memory update/reset, collects and broadcasts info about the last modifications the class-method did.
 * sAppMem::Broadcast() Broadcast information in shared-memory about the last modifications
 */

class sAppMem {

public static function useSSE()
{
  return (defined('SSE_CONNECT') && SSE_CONNECT);
}

public static function Control($event='',$data='', $metadata='')
{
  if ( !sAppMem::useSSE() || empty($event) ) return;

  // $data is generally an array generated by a compact() where key was the variable name.
  // In some case $data can be cTopic or cPost object.

  // To force a page reload, broadcast on the section channel {"s":"reset"}
  $a = 0; // Action indicator used with Topic ONLY (0=update,1=insert,-1=delete)
  switch($event)
  {

  case 'cPost:InsertPost':

    if ( !is_a($data,'cPost') ) break;
    // Fetch basic properties and last-post info
    $jsondata = '{"s":'.$data->section.',"t":'.$data->topic.',"replies":"+1","lastpostid":'.$data->id.',"lastpostdate":"'.date('H:i').'","lastpostuser":'.$data->userid.',"lastpostname":"'.$data->username.'"}';
    sAppMem::Broadcast('reply',$jsondata,true);
    break;

  case 'cTopic:DeletePost':

    if ( !is_a($data,'cTopic') ) break;
    // Fetch basic properties and last-post info
    $jsondata = '{"s":'.$data->section.',"t":'.$data->topic.',"replies":'.$data->items.',"lastpostid":'.$data->id.',"lastpostdate":"'.date('H:i').'","lastpostuser":'.$data->userid.',"lastpostname":"'.$data->username.'"}';
    sAppMem::Broadcast('reply',$jsondata,true);
    break;

  case 'cTopic:InsertTopic':

    // data must be a cTopic object
    if ( !is_a($data,'cTopic') ) break;
    // Fetch basic properties and first/last-post info
    $imgsrc = cTopic::MakeIconSrc($data->type,$data->status,$_SESSION[QT]['skin_dir']);
    $prefixsrc = cPost::GetPrefixSrc($data->parentid,$data->smile,$_SESSION[QT]['skin_dir']);
    $jsondata = '{"a":1,"s":'.$data->parentid.',"t":'.$data->id.',"numid":"'.cTopic::GetRef($data->numid,$data->parentid).'","firstpostid":'.$data->firstpostid.',"lastpostid":'.$data->lastpostid.',"firstpostdate":"'.date('H:i').'","lastpostdate":"'.date('H:i').'","firstpostuser":'.$data->firstpostuser.',"lastpostuser":'.$data->lastpostuser.',"firstpostname":"'.$data->firstpostname.'","lastpostname":"'.$data->lastpostname.'","replies":'.$data->items.',"title":"'.$data->title.'","imgsrc":"'.$imgsrc.'","prefixsrc":"'.$prefixsrc.'"';
    if ( $data->type==='A' && QTI_NEWS_STAMP ) $jsondata .= ',"stamp":"'.L('News_stamp').'"';
    $jsondata .= '}';
    sAppMem::Broadcast('topic',$jsondata,true);
    break;

  case 'cTopic:SetStatus':

    // data must be an array (section,topic,status,statusdate)
    if ( !is_array($data) ) break;
    // Fetch value
    if ( isset($data['section']) ) $s = (int)$data['section'];
    if ( isset($data['topic']) ) $t = (int)$data['topic'];
    if ( isset($data['status']) )
    {
      $status = $data['status'];
      $type = isset($data['type']) ? $data['type'] : 'T';
      $imgsrc = cTopic::MakeIconSrc($type,$status,$_SESSION[QT]['skin_dir']);
    }
    $statusdate = date('H:i');

    $jsondata = json_encode(compact('a','s','t','status','statusdate','imgsrc')); // Works also when variable are missing !
    sAppMem::Broadcast('topic',$jsondata,true);
    break;

  case 'cTopic:SetType':

    // data must be an array (section,topic,status,statusdate)
    if ( !is_array($data) ) break;
    if ( !isset($data['topic']) ) break; // [t] topic is mandatory
    // Fetch topic and type
    $s = isset($data['section']) ? (int)$data['section'] : -1; // [s] section is mandatory
    $t = (int)$data['topic'];
    $type = isset($data['type']) ? $data['type'] : 'T';
    if ( $type==='A' && QTI_NEWS_STAMP ) $stamp =  L('News_stamp');
    $status = isset($data['status']) ? $data['status'] : 'A';
    $imgsrc = cTopic::MakeIconSrc($type,$status,$_SESSION[QT]['skin_dir']);
    $jsondata = json_encode(compact('a','s','t','type','imgsrc','stamp')); // Works also when variable are missing !
    sAppMem::Broadcast('topic',$jsondata,true);
    break;

  case 'cTopic:SetActor':

    // data must be an array (section,topic,status,statusdate)
    if ( !is_array($data) ) break;
    if ( !isset($data['topic']) ) break; // [t] topic is mandatory
    // Fetch topic and type
    $s = isset($data['section']) ? (int)$data['section'] : -1; // [s] section is mandatory
    $t = (int)$data['topic'];
    if ( isset($data['actorid']) ) $actorid = $data['actorid'];
    if ( isset($data['actorname']) ) $actorname = $data['actorname'];
    if ( isset($data['replies']) ) $replies = $data['replies'];
    if ( isset($data['lastpostid']) ) $lastpostid = $data['lastpostid'];
    if ( isset($data['lastpostuser']) ) $lastpostuser = $data['lastpostuser'];
    if ( isset($data['lastpostname']) ) $lastpostname = $data['lastpostname'];
    if ( isset($data['lastpostdate']) ) $lastpostdate = $data['lastpostdate'];
    $jsondata = json_encode(compact('a','s','t','actorid','actorname','replies','lastpostid','lastpostuser','lastpostname','lastpostdate')); // Works also when variable are missing !
    sAppMem::Broadcast('topic',$jsondata,true);
    break;

  case 'cSection:WriteStats':

    // data must be an array (section,topic,status,statusdate)
    if ( !is_array($data) ) break;
    // Fetch section, items and replies
    if ( isset($data['section']) ) $s = (int)$data['section'];
    if ( isset($data['stats']) )
    {
    $stats = QTexplodeIni($data['stats']);
    if ( isset($stats['topics']) ) $sumitems = (int)$stats['topics'];
    if ( isset($stats['replies']) ) $sumreplies = (int)$stats['replies'];
    }
    $jsondata = json_encode(compact('s','sumitems','sumreplies')); // Works also when items or replies are missing !
    sAppMem::Broadcast('section',$jsondata,true);
    break;

  case 'cDomain:Rename':
    Unset($_SESSION['L']['domain']);
    sMem::Clear('sys_domains');
    sMem::Clear('sys_sections');
    sAppMem::Broadcast('section','{"s":"reset"}');
    break;

  case 'cDomain:Create':
    sMem::Clear('sys_domains');
    sAppMem::Broadcast('section','{"s":"reset"}');
    break;

  case 'cDomain:Drop':
    sMem::Clear('sys_domains');
    sMem::Clear('sys_sections');
    $_SESSION['L'] = array();
    sAppMem::Broadcast('section','{"s":"reset"}');
    break;

  }
}

public static function Broadcast($event,$jsondata,$append=false)
{
  if ( !defined('SSE_CONNECT') || SSE_CONNECT==false ) return;

  $timeout = defined('SSE_TIMEOUT') ? SSE_TIMEOUT : 30;
  if ( !is_int($timeout) || $timeout<5 ) $timeout = 30;
  $str = '{"event":"'.strtolower($event).'","data":'.$jsondata.'}';
  if ( $append )
  {
    $old = sMem::memcacheGet(QT.'_sse_'.$event);
    if ( $old!==false && $old!=='' )
    {
    if ( substr($old,0,1)==='[' ) $old = substr($old,1);
    if ( substr($old,-1,1)===']' ) $old = substr($old,0,-1);
    $str= $old.','.$str;
    }
  }
  sMem::memcacheSet( QT.'_sse_'.$event, '['.$str.']', $timeout+1 );
}

}

/**
 * VIP means Visitor In Page: This class includes info on the curent user and the curent page,
 * The class also provides major lists or global stats used in most of the pages
 * Here we extend the basic user's construction methods (cAuthenticate) to add support of Web/quickticket/quicktalk logins
 * Here we extend the basic Login method (cAuthenticate::Login) to return extra user's info
 */

class cVIP
{

public $selfurl;
public $selfname;
public $selfuri;
public $exiturl;
public $exitname;
public $exituri;

public $coockieconfirm = false; // Will be set to TRUE when login is performed via coockie.
public $fullname ='';
public $picture = '';

// --------

public function __construct()
{
  $this->selfurl = APP.'_index.php';
  $this->selfname = '';
  $this->selfuri = '';  // URL parameters
  $this->exiturl = APP.'_index.php';
  $this->exitname = 'Back';
  $this->exituri = '';

  if ( !sUser::Auth() && isset($_COOKIE[QT.'_cookname']) && isset($_COOKIE[QT.'_cookpass']) )
  {
    global $oDB;
    $oDB->Query('SELECT * FROM '.TABUSER.' WHERE name="'.$_COOKIE[QT.'_cookname'].'" AND pwd="'.$_COOKIE[QT.'_cookpass'].'"');
    if ( $row = $oDB->Getrow() )
    {
      $_SESSION[QT.'_usr_auth'] = true;
      $_SESSION[QT.'_usr_id'] = (int)$row['id'];
      $_SESSION[QT.'_usr_name'] = $row['name'];
      //if ( isset($row['firstname']) ) $this->fullname = (empty($row['firstname']) ? '' : $row['firstname']);
      //if ( isset($row['lastname']) )  $this->fullname .= (empty($row['lastname']) ? $_SESSION[QT.'_usr_name'] : $row['lastname']);
      $_SESSION[QT.'_usr_role'] = substr($row['role'],0,1);
      $this->coockieconfirm=true;
    }
  }
}

// --------

static function PageCode($str,$prefixsize=4)
{
  // Returns the PageCode: the php-file without prefix and without .php
  // If several points exist in the pagecode, only the first part is returned
  // This is use as code in the html class style
  $arr = explode('.',substr($str,$prefixsize));
  return $arr[0];
}

// -------- old methods, now handled by subclasses in sUser

function CanView($strCanView='V5',$bStopOff=true) { return $this->user->CanView($strCanView,$bStopOff); }
function IsPrivate($str,$id) { return $this->user->IsPrivate($str,$id); }
function IsStaff() { return sUser::IsStaff(); }
function Login($username='',$password='',$bRemember=FALSE) { return $this->user->Login($username,$password,$bRemember); }

// --------

public function BackButton()
{
  if ( QTI_BACKBUTTON ) return '<a class="button pageback" href="'.Href($this->exiturl).'">'.QTI_BACKBUTTON.'</a>';
  return '';
}

public function Register()
{
  $_SESSION[QT.'_usr_auth'] = 'yes';
  $_SESSION[QT.'_usr_id'] = $this->user->id;
  $_SESSION[QT.'_usr_name'] = $this->user->username;
  $_SESSION[QT.'_usr_role'] = $this->user->role;
}

public static function Unregister($row)
{
  if ( !isset($row['id']) ) die('Unregister: Missing id');

  // delete avatar first
  if ( !empty($row['photo']) )
  {
  if ( file_exists(QTI_DIR_PIC.$row['photo']) ) unlink(QTI_DIR_PIC.$row['photo']);
  }

  // update post.userid, post.username, topic.firstpostuser, topic.lastpostuser, topic.firstpostname, topic.lastpostname
  global $oDB;
  $oDB->Exec('UPDATE '.TABPOST.' SET userid=0, username="Visitor" WHERE userid='.$row['id']);
  $oDB->Exec('UPDATE '.TABTOPIC.' SET firstpostuser=0, firstpostname="Visitor" WHERE firstpostuser='.$row['id']);
  $oDB->Exec('UPDATE '.TABTOPIC.' SET lastpostuser=0, lastpostname="Visitor" WHERE lastpostuser='.$row['id']);
  $oDB->Exec('UPDATE '.TABSECTION.' SET moderator=1,moderatorname="Admin" WHERE moderator='.$row['id']);

  // Delete user
  $oDB->Exec('DELETE FROM '.TABUSER.' WHERE id='.$row['id']);

  // Unregister global sys (will be recomputed on next page)
  sMem::Clear('sys_lastmember');
}

// --------

public static function SysCount($strObject='items',$strWhere='')
{
  global $oDB;
  switch($strObject)
  {
  case 'topics':
  case 'items':
    $oDB->Query('SELECT count(id) as countid FROM '.TABTOPIC.' WHERE id>=0'.$strWhere);
    $row = $oDB->Getrow();
    return (int)$row['countid'];
    break;
  case 'replies':
    $oDB->Query('SELECT count(id) as countid FROM '.TABPOST.' WHERE type<>"P"'.$strWhere);
    $row = $oDB->Getrow();
    return (int)$row['countid'];
    break;
  case 'members':
    $oDB->Query('SELECT count(id) as countid FROM '.TABUSER.' WHERE id>0'.$strWhere);
    $row = $oDB->Getrow();
    return (int)$row['countid'];
    break;
  case 'states':
    $arr = array();
      $oDB->Query('SELECT max(id) as countid FROM '.TABUSER.' WHERE id>=0'.$strWhere);
      $row = $oDB->Getrow();
    $arr['newuserid'] = intval($row['countid']);
      $oDB->Query('SELECT name,firstdate FROM '.TABUSER.' WHERE id='.$row['countid'] );
      $row = $oDB->Getrow();
    $arr['newusername'] = $row['name'];
    $arr['newuserdate'] = (empty($row['firstdate']) ? '0' : substr($row['firstdate'],0,8)); // date only
    return $arr;
    break;
  default:
    die('SysCount: Invalid argument');
  }
}

// --------

public static function GetTypes()
{
  return cTopic::Types();
}

// --------
// interface methods
// --------

public function Logout()
{
  // Remove session info (and cookie)
  $_SESSION=array();
  session_destroy();
  if ( isset($_COOKIE[QT.'_cookname']) ) setcookie(QT.'_cookname', '', time()+60*60*24*100, '/');
  if ( isset($_COOKIE[QT.'_cookpass']) ) setcookie(QT.'_cookpass', '', time()+60*60*24*100, '/');
  if ( isset($_COOKIE[QT.'_cooklang']) ) setcookie(QT.'_cooklang', '', time()+60*60*24*100, '/');
}

// --------

public static function SysInit($key,$default=false)
{
  switch($key)
  {
  case 'sys_domains': $obj = GetDomains(); break;
  case 'sys_sections': $obj = GetSections('A'); break; // attention this get ALL sections
  case 'sys_statuses': $obj = sStatus::GetAll(); break;
  case 'sys_types': $obj = cTopic::Types(); break; // system types are just the Topic types
  case 'sys_members': $obj = cVIP::SysCount('members'); break;
  case 'sys_lastmember': $obj = sUser::GetLastMember(); break; // last registered user
  default: $obj = $default;
  }
  return $obj;
}

}